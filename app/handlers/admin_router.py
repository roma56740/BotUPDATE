from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.keyboards.admin import admin_main_keyboard, get_decision_keyboard
from app.keyboards.common import role_keyboard
from app.keyboards.user import manager_menu_keyboard
from app.database import (
    get_all_users, delete_user_by_username, get_user_by_username,
    update_user_hearts, update_user_penalty, add_user
)
from app.utils import format_user_info, notify_user_by_username
from app.google_api import get_sales_plan, get_manager_stats, update_manager_username
from app.states import AdminUsernameInput, AdminHeartAction, AdminRemoveHeartState
from app.config import ADMIN_ID

admin_router = Router()

@admin_router.message(F.from_user.id == ADMIN_ID, F.text == "/admin")
async def admin_panel(msg: Message):
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_keyboard)

@admin_router.message(F.text == "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def all_users(msg: Message):
    users = get_all_users(exclude_role="–ú–µ–Ω–µ–¥–∂–µ—Ä")
    if not users:
        await msg.answer("–ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    for u in users:
        await msg.answer(format_user_info(u))

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def ask_delete(msg: Message, state: FSMContext):
    await state.set_state(AdminUsernameInput.waiting_username)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@admin_router.message(AdminUsernameInput.waiting_username)
async def delete_user(msg: Message, state: FSMContext):
    username = msg.text.strip("@")
    delete_user_by_username(username)
    await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω.")
    await state.clear()

@admin_router.message(F.text == "–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂")
async def sales_plan(msg: Message):
    data = get_sales_plan()
    text = "üìä –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂:\n"
    for row in data:
        text += f"- –î–µ–Ω—å: {row['–¥–µ–Ω—å']}, –ú–µ—Å—è—Ü: {row['–º–µ—Å—è—Ü']}\n"
    await msg.answer(text)

@admin_router.message(F.text == "–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")
async def all_managers(msg: Message):
    users = get_all_users()
    for u in users:
        if u[2] == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
            gstats = get_manager_stats(u[1])
            await msg.answer(format_user_info(u) + f"\nüìà Google: {gstats or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–¥—Ü–µ")
async def add_heart_start(msg: Message, state: FSMContext):
    await state.set_state(AdminHeartAction.waiting_username)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@admin_router.message(AdminHeartAction.waiting_username)
async def add_heart_reason(msg: Message, state: FSMContext):
    username = msg.text.strip("@")
    user = get_user_by_username(username)
    if not user:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(user=user)
    await msg.answer(format_user_info(user) + "\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdminHeartAction.reason_input)

@admin_router.message(AdminHeartAction.reason_input)
async def add_heart_logic(msg: Message, state: FSMContext):
    data = await state.get_data()
    user = data['user']
    reason = msg.text
    hearts = user[4]
    penalty = user[5]
    user_id = user[0]

    if penalty > 0:
        await msg.answer(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —à—Ç—Ä–∞—Ñ ({penalty}). –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å:")
        await state.set_state(AdminHeartAction.penalty_amount)
        return

    if hearts >= 3:
        await msg.answer("‚ù§Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –º–∞–∫—Å–∏–º—É–º —Å–µ—Ä–¥–µ—Ü.")
    else:
        update_user_hearts(user_id, hearts + 1)
        await msg.answer("–°–µ—Ä–¥—Ü–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        await notify_user_by_username(msg.bot, user[1], "‚ù§Ô∏è –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–¥—Ü–µ!\n–ü—Ä–∏—á–∏–Ω–∞: " + reason)
    await state.clear()

@admin_router.message(AdminHeartAction.penalty_amount)
async def reduce_penalty(msg: Message, state: FSMContext):
    amount = int(msg.text)
    data = await state.get_data()
    user = data['user']
    new_penalty = max(0, user[5] - amount)
    update_user_penalty(user[0], new_penalty)
    await msg.answer(f"‚öñÔ∏è –®—Ç—Ä–∞—Ñ —É–º–µ–Ω—å—à–µ–Ω. –ù–æ–≤—ã–π —à—Ç—Ä–∞—Ñ: {new_penalty}")
    await notify_user_by_username(msg.bot, user[1], f"üîª –í–∞—à —à—Ç—Ä–∞—Ñ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}. –¢–µ–∫—É—â–∏–π —à—Ç—Ä–∞—Ñ: {new_penalty}")
    await state.clear()

@admin_router.message(F.text == "–°–Ω—è—Ç—å —Å–µ—Ä–¥—Ü–µ")
async def remove_heart_start(msg: Message, state: FSMContext):
    await state.set_state(AdminRemoveHeartState.waiting_username)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@admin_router.message(AdminRemoveHeartState.waiting_username)
async def remove_heart_reason(msg: Message, state: FSMContext):
    username = msg.text.strip("@")
    user = get_user_by_username(username)
    if not user:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(user=user)
    await msg.answer(format_user_info(user) + "\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminRemoveHeartState.reason_input)

@admin_router.message(AdminRemoveHeartState.reason_input)
async def remove_heart_logic(msg: Message, state: FSMContext):
    data = await state.get_data()
    user = data['user']
    reason = msg.text
    hearts = user[4]
    user_id = user[0]

    if hearts > 0:
        update_user_hearts(user_id, hearts - 1)
        await msg.answer("–°–µ—Ä–¥—Ü–µ —É–¥–∞–ª–µ–Ω–æ.")
        await notify_user_by_username(msg.bot, user[1], "‚ùå –£ –≤–∞—Å —É–¥–∞–ª–µ–Ω–æ —Å–µ—Ä–¥—Ü–µ.\n–ü—Ä–∏—á–∏–Ω–∞: " + reason)
    else:
        await msg.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0 —Å–µ—Ä–¥–µ—Ü. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞:")
        await state.set_state(AdminRemoveHeartState.penalty_reason)
        return
    await state.clear()

@admin_router.message(AdminRemoveHeartState.penalty_reason)
async def penalty_reason_input(msg: Message, state: FSMContext):
    await state.update_data(penalty_reason=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞:")
    await state.set_state(AdminRemoveHeartState.penalty_value)

@admin_router.message(AdminRemoveHeartState.penalty_value)
async def add_penalty(msg: Message, state: FSMContext):
    amount = int(msg.text)
    data = await state.get_data()
    user = data['user']
    new_penalty = user[5] + amount
    update_user_penalty(user[0], new_penalty)
    await msg.answer(f"–®—Ç—Ä–∞—Ñ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π —à—Ç—Ä–∞—Ñ: {new_penalty}")
    await notify_user_by_username(msg.bot, user[1],
        f"‚ö†Ô∏è –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ: {amount}\n–ü—Ä–∏—á–∏–Ω–∞: {data['penalty_reason']}")
    await state.clear()

@admin_router.callback_query(F.data.startswith("approve_reg:"))
async def approve_manager(callback: CallbackQuery):
    _, user_id, name = callback.data.split(":")
    user_id = int(user_id)
    tg_user = await callback.bot.get_chat(user_id)

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º username –≤ Google —Ç–∞–±–ª–∏—Ü—É
    update_manager_username(name, tg_user.username)

    add_user(user_id, tg_user.username, "–ú–µ–Ω–µ–¥–∂–µ—Ä", name)
    await callback.bot.send_message(
        user_id,
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.",
        reply_markup=manager_menu_keyboard
    )
    await callback.message.edit_text("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

@admin_router.callback_query(F.data.startswith("decline_reg:"))
async def decline_manager(callback: CallbackQuery):
    _, user_id = callback.data.split(":")
    user_id = int(user_id)
    await callback.bot.send_message(
        user_id,
        "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=role_keyboard
    )
    await callback.message.edit_text("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")


from app.database import get_user_by_username, update_user_hearts
from app.utils import notify_user_by_username

@admin_router.callback_query(F.data.startswith("approve_heart:"))
async def approve_heart(callback: CallbackQuery):
    try:
        _, from_user, to_user, *desc_parts = callback.data.split(":")
        description = ":".join(desc_parts)
        to_user_data = get_user_by_username(to_user)
        if not to_user_data:
            await callback.message.edit_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{to_user} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        current_hearts = to_user_data[4]
        if current_hearts >= 3:
            await callback.message.edit_text(f"‚ùó –£ @{to_user} —É–∂–µ –º–∞–∫—Å–∏–º—É–º ‚ù§Ô∏è (3/3).")
            return

        update_user_hearts(to_user_data[0], current_hearts + 1)

        await notify_user_by_username(callback.bot, to_user, f"‚ù§Ô∏è –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–¥—Ü–µ –∑–∞ –ø–æ–º–æ—â—å –æ—Ç @{from_user}!\nüìé {description}")
        await callback.bot.send_message(to_user_data[0], "‚úÖ –í–∞—à–µ —Å–µ—Ä–¥—Ü–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await callback.message.edit_text("‚úÖ –°–µ—Ä–¥—Ü–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

@admin_router.callback_query(F.data.startswith("decline_heart:"))
async def decline_heart(callback: CallbackQuery):
    _, from_user, to_user = callback.data.split(":")
    await notify_user_by_username(callback.bot, from_user, f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å @{to_user} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.")
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
